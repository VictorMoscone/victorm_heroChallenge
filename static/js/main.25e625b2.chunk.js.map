{"version":3,"sources":["components/Tiles/Tiles.js","components/Roster/Roster.js","images/xmen.png","images/avengers.png","images/justiceleague.png","images/suicidesquad.png","images/teentitans.png","images/guardians.png","components/CharSheet/CharSheet.js","App.js","reportWebVitals.js","index.js"],"names":["Tiles","props","chosenTeam","src","imgSrc","alt","team","className","onClick","setChosenTeam","rosterData","Roster","useState","teamMap","setTeamMap","useEffect","map","character","type","setChosenCharacter","name","id","CharSheet","statSquish","chosenCharacter","powerstats","totalStats","intelligence","strength","speed","durability","power","combat","images","sm","App","loadState","setLoadState","characterData","setCharacterData","xMenList","setXmenList","avengersList","setAvengersList","justiceLeagueList","setJusticeLeagueList","sSquadList","setSSquadList","teenTitansList","setTeenTitansList","guardiansList","setGuardiansList","generateRosters","data","sortTeam","teamArray","forEach","connections","groupAffiliation","includes","push","length","a","axios","get","console","log","xmenImg","avengersImg","justiceleagueImg","suicidesquadImg","teentitansImg","guardiansImg","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.25e625b2.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Tiles.css';\r\n\r\n// The tiles will only appear if a team hasn't been chosen.\r\nconst Tiles = (props) => {\r\n    if (props.chosenTeam === 'Not Selected') {\r\n        return <div><img src={props.imgSrc} alt={props.team} className='Tile' onClick={() => props.setChosenTeam(props.rosterData)}/></div>\r\n    };\r\n\r\n    return (\r\n        <div></div>\r\n    );\r\n};\r\n\r\nexport default Tiles\r\n","import React, { useEffect, useState } from 'react'\r\nimport './Roster.css';\r\n\r\nconst Roster = (props) => {\r\n\r\n    const [teamMap, setTeamMap] = useState();\r\n\r\n    // On component load, we map each provided character on the team with a button.\r\n    useEffect(() => {\r\n        if (props.chosenTeam !== 'Not Selected') {\r\n            setTeamMap(props.chosenTeam.map( \r\n                (character) =>\r\n                  {\r\n                    return <button className=\"charButton\" type=\"button\" key={character.id} onClick={() => props.setChosenCharacter(character)}>{character.name}</button>;\r\n                  }\r\n                )); \r\n        };\r\n      // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [props.chosenTeam]);\r\n\r\n    return (\r\n        <div className='Roster'>\r\n            {teamMap}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Roster\r\n","export default __webpack_public_path__ + \"static/media/xmen.54981feb.png\";","export default __webpack_public_path__ + \"static/media/avengers.4581aae3.png\";","export default __webpack_public_path__ + \"static/media/justiceleague.cb0b3a64.png\";","export default __webpack_public_path__ + \"static/media/suicidesquad.d73ee52e.png\";","export default __webpack_public_path__ + \"static/media/teentitans.2c18560d.png\";","export default __webpack_public_path__ + \"static/media/guardians.bdbb3e0a.png\";","import React from 'react'\r\nimport './CharSheet.css';\r\n\r\nconst CharSheet = (props) => {\r\n\r\n    // This is just to save some bits of code.\r\n    let statSquish = props.chosenCharacter.powerstats;\r\n\r\n    let totalStats = 0;\r\n\r\n    // We add all of the stats of the character together.\r\n    let statCalc = () => {\r\n        totalStats = statSquish.intelligence + statSquish.strength + statSquish.speed + statSquish.durability + statSquish.power + statSquish.combat;\r\n    };\r\n\r\n    statCalc();\r\n\r\n    return (\r\n        <div className=\"grid-container\">\r\n            <div className=\"item1\">{props.chosenCharacter.name}</div>\r\n            <img className=\"item2\" src={props.chosenCharacter.images.sm} alt=\"Test\"></img>\r\n            <div className=\"item3\">Intelligence:</div>\r\n            <div className=\"item4\">Strength:</div>\r\n            <div className=\"item5\">Speed:</div>\r\n            <div className=\"item6\">Durability:</div>\r\n            <div className=\"item7\">Power:</div>\r\n            <div className=\"item8\">Combat:</div>\r\n            <div className=\"item9\">{statSquish.intelligence}</div>\r\n            <div className=\"item10\">{statSquish.strength}</div>\r\n            <div className=\"item11\">{statSquish.speed}</div>\r\n            <div className=\"item12\">{statSquish.durability}</div>\r\n            <div className=\"item13\">{statSquish.power}</div>\r\n            <div className=\"item14\">{statSquish.combat}</div>\r\n            <div className=\"item15\">Total Stats: {totalStats}</div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default CharSheet\r\n","import axios from 'axios';\r\nimport { useEffect, useState } from 'react';\r\nimport './App.css';\r\nimport Tiles from './components/Tiles/Tiles';\r\nimport Roster from './components/Roster/Roster';\r\nimport xmenImg from './images/xmen.png';\r\nimport avengersImg from './images/avengers.png';\r\nimport justiceleagueImg from './images/justiceleague.png';\r\nimport suicidesquadImg from './images/suicidesquad.png';\r\nimport teentitansImg from './images/teentitans.png';\r\nimport guardiansImg from './images/guardians.png';\r\nimport CharSheet from './components/CharSheet/CharSheet';\r\n\r\nfunction App() {\r\n\r\n  const [loadState, setLoadState] = useState(true);\r\n  const [characterData, setCharacterData] = useState([]);\r\n  const [xMenList, setXmenList] = useState([]);\r\n  const [avengersList, setAvengersList] = useState([]);\r\n  const [justiceLeagueList, setJusticeLeagueList] = useState([]);\r\n  const [sSquadList, setSSquadList] = useState([]);\r\n  const [teenTitansList, setTeenTitansList] = useState([]);\r\n  const [guardiansList, setGuardiansList] = useState([]);\r\n  const [chosenTeam, setChosenTeam] = useState('Not Selected');\r\n  const [chosenCharacter, setChosenCharacter] = useState ('Not Selected');\r\n\r\n  // Will save states for each team.\r\n  const generateRosters = (data) => {\r\n    sortTeam(data, 'X-Men');\r\n    sortTeam(data, 'Avengers');\r\n    sortTeam(data, 'Justice League');\r\n    sortTeam(data, 'Suicide Squad');\r\n    sortTeam(data, 'Teen Titans');\r\n    sortTeam(data, 'Guardians of the Galaxy');\r\n  };\r\n\r\n  const sortTeam = (data, team) => {\r\n    const teamArray = [];\r\n\r\n    // For each API entry, we check their affiliations...\r\n    data.forEach(character => {\r\n      if (character.connections.groupAffiliation.includes(team)) {\r\n        // If the affiliation has the team name we're looking for, it's added to an array.\r\n        teamArray.push(character);\r\n      };\r\n    });\r\n\r\n    // Depending on which team we want, we set it as a state.\r\n    switch (team) {\r\n      case 'X-Men':\r\n        setXmenList(teamArray);\r\n        break;\r\n      case 'Avengers':\r\n        setAvengersList(teamArray);\r\n        break;\r\n      case 'Justice League':\r\n        setJusticeLeagueList(teamArray);\r\n        break;\r\n      case 'Suicide Squad':\r\n        setSSquadList(teamArray);\r\n        break;\r\n      case 'Teen Titans':\r\n        setTeenTitansList(teamArray);\r\n        break;\r\n      case 'Guardians of the Galaxy':\r\n        setGuardiansList(teamArray);\r\n        break;\r\n      default:\r\n        break;\r\n    };\r\n  };\r\n\r\n  useEffect(() => {\r\n    // on component load, if we haven't gotten the data before, we will now!\r\n    if (characterData.length === 0) {\r\n      (async () => {\r\n        try {\r\n          const { data } = await axios.get(\r\n            `https://akabab.github.io/superhero-api/api/all.json`,\r\n          );\r\n          // This will generate the rosters, and let our load state know that it's done loading.\r\n          setCharacterData(data);\r\n          generateRosters(data);\r\n          setLoadState(false);\r\n        } catch (err) {\r\n          console.log(err);\r\n        };\r\n      })();\r\n    };\r\n  }, [characterData]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  // If the app is still loading, it will display a loading message.\r\n  if (loadState) {\r\n    return <div className=\"App\">Loading...</div>;\r\n  };\r\n\r\n  // Depending on the Team or Character states; the app will render three different sets of components.\r\n  if (chosenTeam === 'Not Selected') {\r\n    return <div className=\"AppGrid\">\r\n      <Tiles team='X-Men' rosterData={xMenList} imgSrc={xmenImg} chosenTeam={chosenTeam} setChosenTeam={setChosenTeam}/>\r\n      <Tiles team='Avengers' rosterData={avengersList} imgSrc={avengersImg} chosenTeam={chosenTeam} setChosenTeam={setChosenTeam}/>\r\n      <Tiles team='Justice League' rosterData={justiceLeagueList} imgSrc={justiceleagueImg} chosenTeam={chosenTeam} setChosenTeam={setChosenTeam}/>\r\n      <Tiles team='Suicide Squad' rosterData={sSquadList} imgSrc={suicidesquadImg} chosenTeam={chosenTeam} setChosenTeam={setChosenTeam}/>\r\n      <Tiles team='Teen Titans' rosterData={teenTitansList} imgSrc={teentitansImg} chosenTeam={chosenTeam} setChosenTeam={setChosenTeam}/>\r\n      <Tiles team='Guardians of the Galaxy' rosterData={guardiansList} imgSrc={guardiansImg} chosenTeam={chosenTeam} setChosenTeam={setChosenTeam}/>\r\n      <Roster chosenTeam={chosenTeam} />\r\n    </div>;\r\n  } else if (chosenTeam !== 'Not Selected' && chosenCharacter === 'Not Selected') {\r\n    return <div className=\"App\">\r\n      <button id=\"backButton\" type=\"button\" onClick={() => setChosenTeam('Not Selected')}>Go Back</button>\r\n      <Roster chosenTeam={chosenTeam} setChosenCharacter={setChosenCharacter}/>\r\n    </div>\r\n  } else if (chosenCharacter !== 'Not Selected') {\r\n    return <div className=\"App\">\r\n      <button id=\"backButton\" type=\"button\" onClick={() => setChosenCharacter('Not Selected')}>Go Back</button>\r\n      <CharSheet chosenCharacter={chosenCharacter}/>\r\n    </div>\r\n  };\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}